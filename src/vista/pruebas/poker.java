/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.pruebas;

import javax.swing.JOptionPane;
import tipografias.Fuentes;

//librerias para exportar en excel
import java.io.*;
//import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.*;
//import org.apache.poi.hssf.usermodel.*;
//import org.apache.poi.xssf.usermodel.*;

//librerias que deberian ir en el controlador de excel
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author dark_
 */
public class poker extends javax.swing.JInternalFrame {

     // --- VARIABLES ------------crea variables para el modelo de la tabla y el tipo de fuente del formulario
    private final Fuentes tipoFuente; // para llamar el metodo de tipografias personalizadas

    Workbook wb; // para trabajar importar y/o exportar archivos en xls

    JFileChooser selecArchivo = new JFileChooser();
    File archivo;
    int contAccion = 0;
    double resultadoGlobal;
    /**
     * Creates new form poker
     */
    public poker() {
        initComponents();
        
        // SE PERSONALIZA TODO EL TEXTO CON FUENTES DEL PAQUETE TIPOGRAFIA
        tipoFuente = new Fuentes(); // crea tipo de fuente para usar atributos y procedimientos
        ///----------------///----- ETIQUETAS -----///---------------///
        etiq_tituloCorridasAYB_.setFont(tipoFuente.fuente(tipoFuente.GOD, 0, 24));
        etiq_resultado_.setFont(tipoFuente.fuente(tipoFuente.GOD, 0, 18));
        etiq_resultado_.setVisible(false);
        ///----------------///----- TABLAS -----///---------------///
        tabla_numerosAleatorios_.setVisible(false);
        ///----------------///----- TEXTO -----///---------------///

        ///----------------///----- BOTONES -----///---------------///

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiq_tituloCorridasAYB_ = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_numerosAleatorios_ = new javax.swing.JTable();
        btn_importar_ = new javax.swing.JButton();
        etiq_resultado_ = new javax.swing.JLabel();
        etiq_resultado_1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        etiq_tituloCorridasAYB_.setText("PRUEBA POKER");

        tabla_numerosAleatorios_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_numerosAleatorios_.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_numerosAleatorios_);

        btn_importar_.setText("IMPORTAR desde EXCEL");
        btn_importar_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importar_ActionPerformed(evt);
            }
        });

        etiq_resultado_.setText("RESULTADO");

        etiq_resultado_1.setText("RESULTADO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(etiq_tituloCorridasAYB_)
                            .addComponent(etiq_resultado_1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(btn_importar_)))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(139, 139, 139)
                    .addComponent(etiq_resultado_)
                    .addContainerGap(139, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiq_tituloCorridasAYB_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_importar_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(etiq_resultado_1)
                .addGap(20, 20, 20))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(176, 176, 176)
                    .addComponent(etiq_resultado_)
                    .addContainerGap(177, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_importar_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importar_ActionPerformed

        contAccion++;
        if (contAccion == 1) {
            agregarFiltro();
        }

        if (selecArchivo.showDialog(null, "Seleccionar archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = selecArchivo.getSelectedFile();
            if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                JOptionPane.showMessageDialog(null, importar(archivo, tabla_numerosAleatorios_));
            } else {
                JOptionPane.showMessageDialog(null, "Elija un formato de Excel valido");
            }
        }
    }//GEN-LAST:event_btn_importar_ActionPerformed

// ----------- FUNCIONES Y PROCEDIMIENTOS -------------------------------------------/////////////////////////////////
    
    public void calcular() {

        ArrayList<String> stringImportados = new ArrayList<>();
        
        int numFilas = tabla_numerosAleatorios_.getRowCount();
        double filas = (double) numFilas;
        
        String sacarDecimal;
        //String[] partes;
        String Decimales;
        
        //////// --- APARTA LOS DECIMALES DE LOS NUMEROS QUE LLEGAN --- ////////
        for (int i = 0; i < numFilas; i++) {
            sacarDecimal = tabla_numerosAleatorios_.getValueAt(i, 1).toString();
            //System.out.println("saca el decimal: "+sacarDecimal);
            String[] partes = sacarDecimal.split("\\.");
            //System.out.println("parte entera: "+partes[0]);
           // System.out.println("parte decimal: "+partes[1]);
            Decimales = partes[1];
            stringImportados.add(Decimales);
        }
            
        double suma = 0;
        
        for (int i = 0; i < numFilas; i++) {
            suma = suma + Double.parseDouble( stringImportados.get(i) );
        }
        
        int promedio = (int) (suma/numFilas);
        
        int decimal = cuentaDigitos( promedio );
        
        System.out.println("el promedio es de: "+promedio);
        
        //////// --- RELLENA LOS NUMEROS CON CEROS SI FALTAN --- ////////
        
        if( decimal > 2 && decimal < 6 ){
            
            String rellenar = ""; 
            String aux;
            
            switch( decimal ){
                case 3:
                    for(int i = 0; i < numFilas; i++ ){
                
                        switch ( stringImportados.get(i).length() ) {
                            case 1:
                                rellenar = "00";
                                aux = stringImportados.get(i);
                                aux = aux+rellenar;
                                stringImportados.set(i, aux);
                                break;
                            case 2:
                                rellenar = "0";
                                aux = stringImportados.get(i);
                                aux = aux+rellenar;
                                stringImportados.set(i, aux);
                                break;
                            default:
                                break;
                        }
               
                    }
                    break;
                case 4:
                    for(int i = 0; i < numFilas; i++ ){
                
                        switch ( stringImportados.get(i).length() ) {
                            case 1:
                                rellenar = "000";
                                break;
                            case 2:
                                rellenar = "00";
                                break;
                            case 3:
                                rellenar = "0";
                                break;
                            default:
                                break;
                        }
               
                    }
                    break;
                case 5:
                    for(int i = 0; i < numFilas; i++ ){
                
                        switch ( stringImportados.get(i).length() ) {
                            case 1:
                                rellenar = "0000";
                                break;
                            case 2:
                                rellenar = "000";
                                break;
                            case 3:
                                rellenar = "00";
                                break;
                            case 4:
                                rellenar = "0";
                                break;
                            default:
                                break;
                        }
               
                    }
                    break;
                default:
                    break;
            }
            
            System.out.println("arreglo con relleno");
            
            for (int i = 0; i < numFilas; i++) {
                System.out.println(stringImportados.get(i));
            }
            
            //////// --- CONTAR duplas, triples, entre otros  --- ////////
            ArrayList<Integer> naturales = new ArrayList<>();
            ArrayList<Integer> categorias = new ArrayList<>();
            int posNatural;
            int auxPos;
            int auxCate;
            for (int h = 0; h < 10; h++) {
                naturales.add(0);
            }
            for (int h = 0; h < 3; h++) {
                categorias.add(0);
            }
            
            switch ( decimal ) {
                case 3:
                    int todDifer;
                    int unPar;
                    int triple;
                    
                    for (int i = 0; i < numFilas; i++) {
                        
                        todDifer = 0;
                        unPar = 0;
                        triple = 0;
                        
                        String revisar = stringImportados.get(i);
                        String[] arrRevisar = revisar.split("");
                        
                        for (int j = 0; j < revisar.length(); j++) {
                            posNatural = Integer.parseInt( arrRevisar[j] );
                            auxPos = naturales.get( posNatural );
                            naturales.set(posNatural , auxPos+1 );
                        }
                        
                        System.out.println("arreglo naturales con cantidad");
                        
                        for (int k = 0; k < 10; k++) {
                            System.out.println( naturales.get(k) );
                            if( naturales.get(k) == 3 ){
                                triple = 1;
                                break;
                            }
                            if( naturales.get(k) == 2 ){
                                unPar = 1;
                                break;
                            }
                        }
                        
                        if( unPar == 0 && triple == 0  ){
                            todDifer = 1;
                        }
                        
                        auxCate = categorias.get(0);
                        categorias.set(0, auxCate+todDifer);
                        
                        auxCate = categorias.get(1);
                        categorias.set(1, auxCate+unPar);
                        
                        auxCate = categorias.get(2);
                        categorias.set(2, auxCate+triple);
                        
                        for (int h = 0; h < 10; h++) {
                            naturales.set(h, 0);
                        }
                    }
                    
                    System.out.println("cantidad todos diferentes:  "+categorias.get(0));
                    System.out.println("cantidad un par:            "+categorias.get(1));
                    System.out.println("cantidad triples:           "+categorias.get(2));
                    
                    break;
                case 4:
                    
                    break;
                case 5:
                    
                    break;
                default:
                    break;
            }
            /*System.out.println("arreglo naturales con cantidad");
            for (int i = 0; i < 10; i++) {
                naturales.get(i);
            }*/
            
        }else{
            JOptionPane.showMessageDialog(null, "La cantidad de decimales debe ser entre 3 a 5" );
        }
        
    }
    
    private static int cuentaDigitos(int numero) // se certifica con esto de que sean numeros en la celda de la tabla
    {
        int digitos = 0;
        while( numero !=0 ) //cuenta los digitos de un numero
            {
                numero = numero/10;
                digitos++;
            }

        return digitos;
    } 
    
    public String importar(File archivo, JTable tablaD) {

        String respuesta = "No se realizo con exito la importacion";
        DefaultTableModel modeloT = new DefaultTableModel();
        tablaD.setModel(modeloT);

        try {
            wb = WorkbookFactory.create(new FileInputStream(archivo));
            Sheet hoja = wb.getSheetAt(0);
            Iterator filaIterator = hoja.rowIterator();
            int indiceFila = -1;
            while (filaIterator.hasNext()) {
                indiceFila++;
                Row fila = (Row) filaIterator.next();
                Iterator columnaIterator = fila.cellIterator();
                Object[] listaColumna = new Object[5];
                int indiceColumna = -1;
                while (columnaIterator.hasNext()) {
                    indiceColumna++;
                    Cell celda = (Cell) columnaIterator.next();
                    if (indiceFila == 0) {
                        modeloT.addColumn(celda.getStringCellValue());
                    } else {
                        if (celda != null) {
                            switch (celda.getCellType()) {
                                case NUMERIC:
                                    listaColumna[indiceColumna] = (int) Math.round(celda.getNumericCellValue());
                                    break;
                                case STRING:
                                    listaColumna[indiceColumna] = celda.getStringCellValue();
                                    break;
                                case BOOLEAN:
                                    listaColumna[indiceColumna] = celda.getBooleanCellValue();
                                    break;
                                default:
                                    listaColumna[indiceColumna] = celda.getDateCellValue();
                                    break;
                            }
                        }
                    }
                }
                if (indiceFila != 0) {
                    modeloT.addRow(listaColumna);
                }
            }
            respuesta = "Importacion exitosa";
            tabla_numerosAleatorios_.setVisible(true);
            /*etiq_info_.setVisible(true);
            etiq_info2_.setVisible(true);
            etiq_aceptacion_.setVisible(true);
            txt_aceptacion_.setVisible(true);
            btn_calcular_.setVisible(true);*/
            calcular();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, "Error al importar datos desde archivo excel: -> " + e);
        }

        return respuesta;
    }

    public void agregarFiltro() {
        selecArchivo.setFileFilter(new FileNameExtensionFilter("Excel (*.xls)", "xls"));
        selecArchivo.setFileFilter(new FileNameExtensionFilter("Excel (*.xlsx)", "xlsx"));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btn_importar_;
    private javax.swing.JLabel etiq_resultado_;
    private javax.swing.JLabel etiq_resultado_1;
    private javax.swing.JLabel etiq_tituloCorridasAYB_;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tabla_numerosAleatorios_;
    // End of variables declaration//GEN-END:variables
}
