/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.pruebas;

import javax.swing.JOptionPane;
import tipografias.Fuentes;

//librerias para exportar en excel
import java.io.*;
//import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.*;
//import org.apache.poi.hssf.usermodel.*;
//import org.apache.poi.xssf.usermodel.*;

//librerias que deberian ir en el controlador de excel
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dark_
 */
public class corridasArribaYAbajo extends javax.swing.JInternalFrame {

    // --- VARIABLES ------------crea variables para el modelo de la tabla y el tipo de fuente del formulario
    private final Fuentes tipoFuente; // para llamar el metodo de tipografias personalizadas

    Workbook wb; // para trabajar importar y/o exportar archivos en xls

    JFileChooser selecArchivo = new JFileChooser();
    File archivo;
    int contAccion = 0;
    double resultadoGlobal;

    /**
     * Creates new form corridasArribaYAbajo
     */
    public corridasArribaYAbajo() {
        initComponents();

        // SE PERSONALIZA TODO EL TEXTO CON FUENTES DEL PAQUETE TIPOGRAFIA
        tipoFuente = new Fuentes(); // crea tipo de fuente para usar atributos y procedimientos
        ///----------------///----- ETIQUETAS -----///---------------///
        etiq_tituloCorridasAYB_.setFont(tipoFuente.fuente(tipoFuente.GOD, 0, 24));
        etiq_resultado_.setFont(tipoFuente.fuente(tipoFuente.GOD, 0, 18));
        etiq_info_.setVisible(false);
        etiq_info2_.setVisible(false);
        etiq_aceptacion_.setVisible(false);
        etiq_resultado_.setVisible(false);
        ///----------------///----- TABLAS -----///---------------///
        tabla_numerosAleatorios_.setVisible(false);
        ///----------------///----- TEXTO -----///---------------///
        txt_aceptacion_.setVisible(false);
        ///----------------///----- BOTONES -----///---------------///
        btn_calcular_.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiq_tituloCorridasAYB_ = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_numerosAleatorios_ = new javax.swing.JTable();
        btn_importar_ = new javax.swing.JButton();
        etiq_aceptacion_ = new javax.swing.JLabel();
        txt_aceptacion_ = new javax.swing.JTextField();
        btn_calcular_ = new javax.swing.JButton();
        etiq_info_ = new javax.swing.JLabel();
        etiq_info2_ = new javax.swing.JLabel();
        etiq_resultado_ = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        etiq_tituloCorridasAYB_.setText("CORRIDAS ARRIBA Y ABAJO");

        tabla_numerosAleatorios_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_numerosAleatorios_.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_numerosAleatorios_);

        btn_importar_.setText("IMPORTAR desde EXCEL");
        btn_importar_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importar_ActionPerformed(evt);
            }
        });

        etiq_aceptacion_.setText("Nivel de aceptacion: ");

        btn_calcular_.setText("Calcular");
        btn_calcular_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcular_ActionPerformed(evt);
            }
        });

        etiq_info_.setText("Niveles mas usados -> 80% = 1.28, 85% = 1.44, 90% = 1.65");

        etiq_info2_.setText("Niveles mas usados -> 95% = 1.96, 85% = 1.44, 99% = 2.58");

        etiq_resultado_.setText("RESULTADO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(btn_importar_))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(etiq_info_)
                            .addComponent(etiq_info2_)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etiq_resultado_)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(etiq_aceptacion_)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_aceptacion_, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_calcular_))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(etiq_tituloCorridasAYB_))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiq_tituloCorridasAYB_)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_importar_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etiq_info_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etiq_info2_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiq_aceptacion_)
                    .addComponent(txt_aceptacion_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_calcular_))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(etiq_resultado_)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_importar_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importar_ActionPerformed

        contAccion++;
        if (contAccion == 1) {
            agregarFiltro();
        }

        if (selecArchivo.showDialog(null, "Seleccionar archivo") == JFileChooser.APPROVE_OPTION) {
            archivo = selecArchivo.getSelectedFile();
            if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                JOptionPane.showMessageDialog(null, importar(archivo, tabla_numerosAleatorios_));
            } else {
                JOptionPane.showMessageDialog(null, "Elija un formato de Excel valido");
            }
        }
    }//GEN-LAST:event_btn_importar_ActionPerformed

    private void btn_calcular_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcular_ActionPerformed
        if ("".equals(txt_aceptacion_.getText())) {
            JOptionPane.showMessageDialog(null, "Debe digitar el valor del nivel de aceptacion");
        } else {
            calcular();
        }
    }//GEN-LAST:event_btn_calcular_ActionPerformed

    // ----------- FUNCIONES Y PROCEDIMIENTOS -------------------------------------------/////////////////////////////////
    public void calcular() {

        ArrayList<Double> numImportados = new ArrayList<>();
        ArrayList<Integer> binario = new ArrayList<>();
        int numFilas = tabla_numerosAleatorios_.getRowCount();
        double filas = (double) numFilas;

        for (int i = 0; i < numFilas; i++) {
            numImportados.add(Double.parseDouble(tabla_numerosAleatorios_.getValueAt(i, 1).toString()));
        }

        for (int i = 1; i < numFilas; i++) {
            if (numImportados.get(i - 1) <= numImportados.get(i)) {
                binario.add(1);
            } else {
                binario.add(0);
            }
        }
        int cont = 0;
        for (int i = 0; i < binario.size(); i++) {// ya que al comparar para los 0 y 1 se quita una posicion
            System.out.println("posicion: " + i + " numero: " + binario.get(i));
            if (i == binario.size() - 1) {
                if (!Objects.equals(binario.get(i), binario.get(i - 1))) {
                    cont++;
                }
            } else {
                if (!Objects.equals(binario.get(i), binario.get(i + 1))) {
                    cont++;
                }
            }
        }
        System.out.println("cantidad de ciclos: " + cont);
        JOptionPane.showMessageDialog(null, "cantidad de ciclos encontrados fue de : " + cont);
        
        double mc0 = ((2*filas)-1)/3;
        double o2 = ((16*filas)-29)/90;
        double zTabla = Double.parseDouble( txt_aceptacion_.getText() );
        double z0 = Math.abs( ( cont - mc0 )/( Math.sqrt(o2) ) );
        
        if( z0 > zTabla ){
            JOptionPane.showMessageDialog(null, "El valor caculado es de: "+z0+" y es mayor que el valor encontrado: "+zTabla+", \n por lo tanto es RECHAZADO");
                etiq_resultado_.setText("RECHAZADO, numero calculado es: "+z0);
                etiq_resultado_.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "El valor caculado es de: "+z0+" y es menor que el valor encontrado: "+zTabla+", \n por lo tanto es ACEPTADO");
            etiq_resultado_.setText("ACEPTADO!, numero calculado es: "+z0);
            etiq_resultado_.setVisible(true);
        }
        
    }

    public String importar(File archivo, JTable tablaD) {

        String respuesta = "No se realizo con exito la importacion";
        DefaultTableModel modeloT = new DefaultTableModel();
        tablaD.setModel(modeloT);

        try {
            wb = WorkbookFactory.create(new FileInputStream(archivo));
            Sheet hoja = wb.getSheetAt(0);
            Iterator filaIterator = hoja.rowIterator();
            int indiceFila = -1;
            while (filaIterator.hasNext()) {
                indiceFila++;
                Row fila = (Row) filaIterator.next();
                Iterator columnaIterator = fila.cellIterator();
                Object[] listaColumna = new Object[5];
                int indiceColumna = -1;
                while (columnaIterator.hasNext()) {
                    indiceColumna++;
                    Cell celda = (Cell) columnaIterator.next();
                    if (indiceFila == 0) {
                        modeloT.addColumn(celda.getStringCellValue());
                    } else {
                        if (celda != null) {
                            switch (celda.getCellType()) {
                                case NUMERIC:
                                    listaColumna[indiceColumna] = (int) Math.round(celda.getNumericCellValue());
                                    break;
                                case STRING:
                                    listaColumna[indiceColumna] = celda.getStringCellValue();
                                    break;
                                case BOOLEAN:
                                    listaColumna[indiceColumna] = celda.getBooleanCellValue();
                                    break;
                                default:
                                    listaColumna[indiceColumna] = celda.getDateCellValue();
                                    break;
                            }
                        }
                    }
                }
                if (indiceFila != 0) {
                    modeloT.addRow(listaColumna);
                }
            }
            respuesta = "Importacion exitosa";
            tabla_numerosAleatorios_.setVisible(true);
            etiq_info_.setVisible(true);
            etiq_info2_.setVisible(true);
            etiq_aceptacion_.setVisible(true);
            txt_aceptacion_.setVisible(true);
            btn_calcular_.setVisible(true);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, "Error al importar datos desde archivo excel: -> " + e);
        }

        return respuesta;
    }

    public void agregarFiltro() {
        selecArchivo.setFileFilter(new FileNameExtensionFilter("Excel (*.xls)", "xls"));
        selecArchivo.setFileFilter(new FileNameExtensionFilter("Excel (*.xlsx)", "xlsx"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular_;
    public javax.swing.JButton btn_importar_;
    private javax.swing.JLabel etiq_aceptacion_;
    private javax.swing.JLabel etiq_info2_;
    private javax.swing.JLabel etiq_info_;
    private javax.swing.JLabel etiq_resultado_;
    private javax.swing.JLabel etiq_tituloCorridasAYB_;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tabla_numerosAleatorios_;
    private javax.swing.JTextField txt_aceptacion_;
    // End of variables declaration//GEN-END:variables
}
