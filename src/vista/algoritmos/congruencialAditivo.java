/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.algoritmos;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tipografias.Fuentes;

//librerias para exportar en excel
import java.io.*;
//import java.util.*;
import javax.swing.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;

//librerias que deberian ir en el controlador de excel
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dark_
 */
public class congruencialAditivo extends javax.swing.JInternalFrame {

// --- VARIABLES ------------crea variables para el modelo de la tabla y el tipo de fuente del formulario

    private final Fuentes tipoFuente; // para llamar el metodo de tipografias personalizadas
    private DefaultTableModel modelo; // se crea modelo para tabla
    private DefaultTableModel modelo2; // se crea modelo2 para tabla 2
    private DefaultTableModel modelo3; // se crea modelo2 para tabla 3
    
    Workbook wb; // para trabajar importar y/o exportar archivos en xls
    
    JFileChooser selecArchivo = new JFileChooser();
    File archivo;
    int contAccion = 0;
    
    public congruencialAditivo() {
        initComponents();
        
        // SE PERSONALIZA TODO EL TEXTO CON FUENTES DEL PAQUETE TIPOGRAFIA
        tipoFuente = new Fuentes(); // crea tipo de fuente para usar atributos y procedimientos
        ///----------------///----- ETIQUETAS -----///---------------///
        etiq_tituloCongruencialAditivo_.setFont(tipoFuente.fuente(tipoFuente.GOD,0,24));
        ///----------------///----- BOTONES -----///---------------///

        ///----------------///----- TABLA MENU -----///---------------///
        tabla_congruencialAditivo_.setEnabled(false);
        tabla_numerosAleatorios_.setEnabled(false);
        tabla_secuencia_.setCellSelectionEnabled(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiq_tituloCongruencialAditivo_ = new javax.swing.JLabel();
        etiq_secuencia_ = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_secuencia_ = new javax.swing.JTable();
        etiq_m_ = new javax.swing.JLabel();
        etiq_g_ = new javax.swing.JLabel();
        txt_g_ = new javax.swing.JTextField();
        txt_m_ = new javax.swing.JTextField();
        btn_calcularG_ = new javax.swing.JButton();
        btn_calcularM_ = new javax.swing.JButton();
        btn_calcular_ = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_congruencialAditivo_ = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_numerosAleatorios_ = new javax.swing.JTable();
        etiq_cantidadNumeros_ = new javax.swing.JLabel();
        txt_cantidadNumeros_ = new javax.swing.JTextField();
        etiq_cantidadDigitos_ = new javax.swing.JLabel();
        txt_cantidadDigitos_ = new javax.swing.JTextField();
        btn_exportar_ = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        etiq_tituloCongruencialAditivo_.setText("CONGRUENCIAL ADITIVO");

        etiq_secuencia_.setText("Secuencia:");

        tabla_secuencia_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "X0", "X1", "X2", "X3", "X4"
            }
        ));
        jScrollPane1.setViewportView(tabla_secuencia_);

        etiq_m_.setText("M:");

        etiq_g_.setText("G:");

        btn_calcularG_.setText("Calcular G");
        btn_calcularG_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularG_ActionPerformed(evt);
            }
        });

        btn_calcularM_.setText("Calcular M");
        btn_calcularM_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularM_ActionPerformed(evt);
            }
        });

        btn_calcular_.setText("Calcular");
        btn_calcular_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcular_ActionPerformed(evt);
            }
        });

        tabla_congruencialAditivo_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "X"
            }
        ));
        jScrollPane2.setViewportView(tabla_congruencialAditivo_);

        tabla_numerosAleatorios_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "R"
            }
        ));
        jScrollPane3.setViewportView(tabla_numerosAleatorios_);

        etiq_cantidadNumeros_.setText("Cantidad de numeros:");

        etiq_cantidadDigitos_.setText("Cantidad Digitos:");

        btn_exportar_.setText("EXPORTAR a EXCEL");
        btn_exportar_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportar_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiq_tituloCongruencialAditivo_)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(etiq_secuencia_)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(etiq_cantidadDigitos_)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txt_cantidadDigitos_, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(etiq_cantidadNumeros_)
                                            .addGap(14, 14, 14)
                                            .addComponent(txt_cantidadNumeros_, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(etiq_m_)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txt_m_, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btn_calcularG_)
                                            .addGap(30, 30, 30)
                                            .addComponent(etiq_g_)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txt_g_, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btn_calcularM_)))
                                    .addGap(59, 59, 59)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(btn_calcular_))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(btn_exportar_)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(etiq_tituloCongruencialAditivo_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(etiq_secuencia_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_m_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiq_m_)
                    .addComponent(btn_calcularG_)
                    .addComponent(txt_g_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_calcularM_)
                    .addComponent(etiq_g_))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(etiq_cantidadDigitos_)
                        .addComponent(txt_cantidadDigitos_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_cantidadNumeros_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiq_cantidadNumeros_)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_calcular_)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btn_exportar_)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_calcularG_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularG_ActionPerformed
        if ( validarIndividual( txt_m_.getText() ) ) { // Math.log10(num) / Math.log10(base)

            double log = Math.log10( Integer.parseInt(txt_m_.getText()) ) / Math.log10(2);

            //System.out.println(" lo que esta en log "+log+" pasado a entero "+ logInt);
            if (  log - Math.floor( log ) == 0 ) {

                int logInt = (int) log;

                txt_g_.setText( String.valueOf(logInt) );

            } else {

                JOptionPane.showMessageDialog( rootPane, " La variable M es ERRONEA ya que G debe ser entero y da como resultado: "+log );

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, " Debe existir la variable M ");
        }
    }//GEN-LAST:event_btn_calcularG_ActionPerformed

    private void btn_calcularM_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularM_ActionPerformed
        if ( validarIndividual( txt_g_.getText() ) ) {
            double g = Double.parseDouble( txt_g_.getText());

            if (  g - Math.floor( g ) == 0 ) {
                //System.out.println(" dice q g es entero "+g);
                int m = (int) Math.pow(2,g);
                //System.out.println(" int m casteado "+m);
                txt_m_.setText( String.valueOf(m) );
            } else {

                JOptionPane.showMessageDialog( rootPane, " La variable M no se puede calcular ya que G debe ser entero y da como resultado: "+g );
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, " Debe existir la variable G ");
        }
    }//GEN-LAST:event_btn_calcularM_ActionPerformed

    private void btn_calcular_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcular_ActionPerformed
        if ( validarTxtVacios() && validarTxtNumericos() && validarTxtPositivos()  ) {

            
            int m = Integer.parseInt( txt_m_.getText() ); // SI GENERA ERROR CON VALORES FLOTANTES ES MEJOR CASTEAR (int)
            //int semilla = Integer.parseInt( txt_semilla_.getText() );
            //int g = Integer.parseInt( txt_g_.getText() );
            boolean ok = false;
            
            /*modelo3 = new DefaultTableModel();
            tabla_secuencia_.setModel(modelo3);*/
            System.out.println(" se comprobraron los txt ");
            for (int i = 0; i < tabla_secuencia_.getColumnCount(); i++) {
                
                if (validarIndividual( tabla_secuencia_.getValueAt(0,i).toString()) ){ 
                    //if ( cuentaDigitos( modelo3.getValueAt(0,i).toString() ) == Integer.parseInt( txt_cantidadDigitos_.getText() ) ) {
                    System.out.println("validando tabla secuencia tamanio "+tabla_secuencia_.getColumnCount()+" columna "+i+" valor "+ tabla_secuencia_.getValueAt(0,i).toString() );    
                    ok = true;
                    /*} else {
                        ok = false;
                        break;
                    }*/
                }else{
                    ok = false;
                }
            }
            

            if(ok){

                int finFilas = Integer.parseInt( txt_cantidadNumeros_.getText() );

                modelo = new DefaultTableModel();
                modelo2 = new DefaultTableModel();
                tabla_congruencialAditivo_.setModel(modelo);
                tabla_numerosAleatorios_.setModel(modelo2);

                modelo.addColumn("#");
                modelo.addColumn("X");

                modelo2.addColumn("#");
                modelo2.addColumn("R");
                
                String sNum[] = new String[2]; // convierte en cadenas para parasarlos al modelo de la tabla
                String sNum2[] = new String[2]; // convierte en cadenas para parasarlos al modelo de la tabla
                
                System.out.println(" llenado las tablas de x y r");
                for (int i = 0; i < 5; i++) {
                    sNum[0] = String.valueOf(i);
                    sNum[1] = tabla_secuencia_.getValueAt(0, i).toString();
                    sNum2[0] = String.valueOf(i);
                    sNum2[1] = String.valueOf(0);
                    //System.out.println("fila 0 columna "+i+" num "+tabla_secuencia_.getValueAt(0, i));
                    modelo.addRow(sNum);
                    modelo2.addRow(sNum2);
                }

                //llenar la tabla con la fila de objetos
                for(int fila=5;fila<=finFilas+4;fila++){ // recorrido de filas
                    
                String sNumeros[] = new String[2]; // convierte en cadenas para parasarlos al modelo de la tabla
                String sNumeros2[] = new String[2];
                    
                    for(int col=0;col<5;col++){ // recorrido de columnas
                        System.out.println("fila "+fila+" columna "+col);
                        switch(col) {
                            case 0:// la columna del numero
                            sNumeros[col] = String.valueOf( fila );
                            //System.out.println("valor en arreglo "+sNumeros[col]);
                            break;
                            case 1:// la columna del numero x o semillas                           
                                int xi,xf,x;
                                xi = Integer.parseInt( tabla_congruencialAditivo_.getValueAt(fila-5, 1).toString() );
                                xf = Integer.parseInt( tabla_congruencialAditivo_.getValueAt(fila-1, 1).toString() );
                                x = (xi+xf)%m;
                                sNumeros[col] = String.valueOf(x);
                                //System.out.println("valor en arreglo "+sNumeros[col]);
                            
                            break;
                            case 2: // la columna del numero
                                sNumeros2[0] = String.valueOf(fila-4);
                                //System.out.println("valor en arreglo "+sNumeros2[0]);
                            break;
                            case 3: // la columna del numero r
                                float r = Float.parseFloat(sNumeros[1] )/(m-1);
                                sNumeros2[1] = String.valueOf(r);
                                //System.out.println("valor en arreglo "+sNumeros2[1]);
                            break;
                            default:
                            // code block
                        }
                    }

                    modelo.addRow(sNumeros); //agregando datos a la fila

                    modelo2.addRow(sNumeros2); //agregando datos a la fila

                    // verificar numero repetidos
                    /*int rep = 0;
                    if(fila > 0){
                        for(int i=0;i<modelo.getRowCount()-1;i++){
                            System.out.println(" valor i "+i+" cantidad filas "+modelo.getRowCount());
                            System.out.println(" valor de fila "+fila+" columna 1 "+modelo.getValueAt(i, 1));
                            System.out.println(" valor del array en columna 1 "+sNumeros[1]);
                            if ( modelo.getValueAt(i,1).toString().equals(sNumeros[1]) ) {
                                System.out.println(" encontro un repetido");
                                rep++;
                            } else {
                                System.out.println("NO encontro un repetido");
                                finFilas++;
                            }
                        }
                    }
                    if(rep>0){
                        break;
                    }*/

                }
            }else{
                JOptionPane.showMessageDialog(rootPane, " La SECUENCIA debe tener numeros y estos deben ser positivos y con la misma cantidad de digitos");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, " Las casillas deben estar llenas, ser numericas y positivas ");
        }
    }//GEN-LAST:event_btn_calcular_ActionPerformed

    private void btn_exportar_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportar_ActionPerformed

        contAccion++;
        if( contAccion == 1 ){ agregarFiltro(); }

        if( selecArchivo.showDialog( null, "Exportar" ) == JFileChooser.APPROVE_OPTION ){
            archivo = selecArchivo.getSelectedFile();
            if( archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")  ){
                JOptionPane.showMessageDialog(null, exportar(archivo, tabla_numerosAleatorios_ ) );
            }else{
                JOptionPane.showMessageDialog(null, "Digite al final del nombre del archivo un formato EXCEL valido. Ejemplo ( archivo.xls o archivo.xlsx )." );
            }
        }
    }//GEN-LAST:event_btn_exportar_ActionPerformed

// ----------- FUNCIONES Y PROCEDIMIENTOS -------------------------------------------///////////////////////////////// 
    
    public String exportar(File archivo, JTable tablaD){
        String respuesta = "No se realizo con exito la exportacion";
        
        int numFila = tablaD.getRowCount(), numColumna = tablaD.getColumnCount();
        
        if( archivo.getName().endsWith("xls") ){
            wb = new HSSFWorkbook();
        }else{
            wb = new XSSFWorkbook();
        }
        
        Sheet hoja = wb.createSheet("congruencialAditivo");
        
        try{           
            for (int i = -1; i < numFila; i++) {               
                Row fila = hoja.createRow(i+1);               
                for (int j = 0; j < numColumna; j++) {                   
                    Cell celda = fila.createCell(j);                   
                    if (i==-1) {                       
                        celda.setCellValue( String.valueOf( tablaD.getColumnName(j) ) );                     
                    } else {                     
                        celda.setCellValue( String.valueOf( tablaD.getValueAt(i, j) ) );                     
                    }                   
                    wb.write(new  FileOutputStream(archivo) );
                }
            }           
            respuesta = "Exportacion exitosa";
            
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, "Error al exportar archivo excel: -> "+e);
        }
        
        return respuesta;  
    }
    
    public void agregarFiltro(){     
        selecArchivo.setFileFilter( new FileNameExtensionFilter( "Excel (*.xls)","xls" )  );
        selecArchivo.setFileFilter( new FileNameExtensionFilter( "Excel (*.xlsx)","xlsx" )  );       
    }
    
    private static int cuentaDigitos(String num) // se certifica con esto de que sean numeros en la celda de la tabla
    {
        int numero = Integer.parseInt(num);
        int digitos = 0;
        while( numero !=0 ) //cuenta los digitos de un numero
            {
                numero = numero/10;
                digitos++;
            }

        return digitos;
    }
    
    private  boolean validarTxtVacios(){
        boolean vacio = true;
      
        if( txt_cantidadDigitos_.getText().isEmpty() ) return false;
        if( txt_cantidadNumeros_.getText().isEmpty() ) return false;
        if( txt_g_.getText().isEmpty() ) return false;
        if( txt_m_.getText().isEmpty() ) return false;
        //if( txt_semilla_.getText().isEmpty() ) return false;

        return vacio;
    }
    
    private  boolean validarTxtPositivos(){
        boolean vacio = true;
      
        if( Integer.parseInt(txt_cantidadDigitos_.getText()) < 0 ) return false;
        if( Integer.parseInt(txt_cantidadNumeros_.getText()) < 0 ) return false;
        if( Integer.parseInt(txt_g_.getText()) < 0 ) return false;
        if( Integer.parseInt(txt_m_.getText()) < 0 ) return false;
        //if( Integer.parseInt(txt_semilla_.getText()) < 0 ) return false;

        return vacio;
    }
    
    private  boolean validarTxtNumericos(){
        boolean vacio = true;
     
        if( !isNumeric( txt_cantidadDigitos_.getText()) ) return false;
        if( !isNumeric( txt_cantidadNumeros_.getText()) ) return false;
        if( !isNumeric( txt_g_.getText()) ) return false;
        if( !isNumeric( txt_m_.getText()) ) return false;
        //if( !isNumeric( txt_semilla_.getText()) ) return false;

        return vacio;
    }
    
    private static boolean validarIndividual( String validar ){
        boolean valido = true;
        
        if( !isNumeric( validar ) ) return false;
        if( Integer.parseInt( validar ) < 0 ) return false;
        if( validar.isEmpty() ) return false;
        
        return valido;
    }
    
    private static boolean isNumeric(String cadena) // se certifica con esto de que sean numeros en la celda de la tabla
    {
        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    } 
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcularG_;
    private javax.swing.JButton btn_calcularM_;
    private javax.swing.JButton btn_calcular_;
    public javax.swing.JButton btn_exportar_;
    private javax.swing.JLabel etiq_cantidadDigitos_;
    private javax.swing.JLabel etiq_cantidadNumeros_;
    private javax.swing.JLabel etiq_g_;
    private javax.swing.JLabel etiq_m_;
    private javax.swing.JLabel etiq_secuencia_;
    private javax.swing.JLabel etiq_tituloCongruencialAditivo_;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabla_congruencialAditivo_;
    private javax.swing.JTable tabla_numerosAleatorios_;
    private javax.swing.JTable tabla_secuencia_;
    private javax.swing.JTextField txt_cantidadDigitos_;
    private javax.swing.JTextField txt_cantidadNumeros_;
    private javax.swing.JTextField txt_g_;
    private javax.swing.JTextField txt_m_;
    // End of variables declaration//GEN-END:variables
}
